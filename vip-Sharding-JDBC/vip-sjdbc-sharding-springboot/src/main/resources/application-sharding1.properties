# 不分库，只分表+读写分离案例（使用role表）
spring.shardingsphere.datasource.names=ds0,ds0slave1,ds0slave2,ds1,ds1slave1,ds1slave2

# 主数据源
spring.shardingsphere.datasource.ds0.type=com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.ds0.driver-class-name=com.mysql.jdbc.Driver
spring.shardingsphere.datasource.ds0.url=jdbc:mysql://localhost:3306/ds0?characterEncoding=utf-8
spring.shardingsphere.datasource.ds0.username=root
spring.shardingsphere.datasource.ds0.password=root
# 从数据源1
spring.shardingsphere.datasource.ds0slave1.type=com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.ds0slave1.driver-class-name=com.mysql.jdbc.Driver
spring.shardingsphere.datasource.ds0slave1.url=jdbc:mysql://localhost:3306/ds0slave1?characterEncoding=utf-8
spring.shardingsphere.datasource.ds0slave1.username=root
spring.shardingsphere.datasource.ds0slave1.password=root
# 从数据源2
spring.shardingsphere.datasource.ds0slave2.type=com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.ds0slave2.driver-class-name=com.mysql.jdbc.Driver
spring.shardingsphere.datasource.ds0slave2.url=jdbc:mysql://localhost:3306/ds0slave2?characterEncoding=utf-8
spring.shardingsphere.datasource.ds0slave2.username=root
spring.shardingsphere.datasource.ds0slave2.password=root

# 主数据源
spring.shardingsphere.datasource.ds1.type=com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.ds1.driver-class-name=com.mysql.jdbc.Driver
spring.shardingsphere.datasource.ds1.url=jdbc:mysql://localhost:3306/ds1?characterEncoding=utf-8
spring.shardingsphere.datasource.ds1.username=root
spring.shardingsphere.datasource.ds1.password=root
# 从数据源1
spring.shardingsphere.datasource.ds1slave1.type=com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.ds1slave1.driver-class-name=com.mysql.jdbc.Driver
spring.shardingsphere.datasource.ds1slave1.url=jdbc:mysql://localhost:3306/ds1slave1?characterEncoding=utf-8
spring.shardingsphere.datasource.ds1slave1.username=root
spring.shardingsphere.datasource.ds1slave1.password=root
# 从数据源2
spring.shardingsphere.datasource.ds1slave2.type=com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.ds1slave2.driver-class-name=com.mysql.jdbc.Driver
spring.shardingsphere.datasource.ds1slave2.url=jdbc:mysql://localhost:3306/ds1slave2?characterEncoding=utf-8
spring.shardingsphere.datasource.ds1slave2.username=root
spring.shardingsphere.datasource.ds1slave2.password=root

# 默认数据库
spring.shardingsphere.sharding.default-data-source-name=ds1

#【默认分库策略】对role_id取模
spring.shardingsphere.sharding.default-database-strategy.inline.sharding-column = user_id
spring.shardingsphere.sharding.default-database-strategy.inline.algorithm-expression = ds$->{user_id % 2}
#spring.shardingsphere.sharding.default-table-strategy.inline.sharding-column =
#spring.shardingsphere.sharding.default-table-strategy.inline.sharding-column =  


# role单库分表(下边的ds0是数据源名称)
spring.shardingsphere.sharding.tables.role.actual-data-nodes=ds0.role_${0..3}
spring.shardingsphere.sharding.tables.role.table-strategy.inline.sharding-column=role_id
spring.shardingsphere.sharding.tables.role.table-strategy.inline.algorithm-expression=role_${role_id.longValue() % 4}
# 自定义分表算法
#spring.shardingsphere.sharding.tables.role.table-strategy.standard.sharding-column=id
#spring.shardingsphere.sharding.tables.role.table-strategy.standard.precise-algorithm-class-name=com.example.demo.algorithm.MyPreciseShardingAlgorithm


# user_info 多库分表
spring.shardingsphere.sharding.tables.user_info.actual-data-nodes=ds${0..1}.user_info
# 设置主键
spring.shardingsphere.sharding.tables.user_info.key-generator.column=user_id
spring.shardingsphere.sharding.tables.user_info.key-generator.type=SNOWFLAKE
# 使用了默认的分库策略
##spring.shardingsphere.sharding.tables.user_info.databaseStrategy.inline.shardingColumn=user_id
##spring.shardingsphere.sharding.tables.user_info.databaseStrategy.inline.algorithm-expression=ds${user_id % 2}
#spring.shardingsphere.sharding.tables.user_info.databaseStrategy.standard.shardingColumn=user_id
#spring.shardingsphere.sharding.tables.user_info.databaseStrategy.standard.preciseAlgorithmClassName=com.example.demo.algorithm.DbPreShardAlgorithm
#spring.shardingsphere.sharding.tables.user_info.databaseStrategy.standard.rangeAlgorithmClassName=com.example.demo.algorithm.DBRangeShardAlgo


# 广播表
spring.shardingsphere.sharding.broadcast-tables=t_config


# t_order 分库分表
# 设置主键
spring.shardingsphere.sharding.tables.t_order.logic-table=t_order
spring.shardingsphere.sharding.tables.t_order.key-generator.column=order_id
spring.shardingsphere.sharding.tables.t_order.key-generator.type=SNOWFLAKE
spring.shardingsphere.sharding.tables.t_order.actual-data-nodes=ds${0..1}.t_order_${0..1}
#spring.shardingsphere.sharding.tables.t_order.databaseStrategy.inline.shardingColumn=user_id
#spring.shardingsphere.sharding.tables.t_order.databaseStrategy.inline.algorithm-expression=ds${user_id % 2}
spring.shardingsphere.sharding.tables.t_order.table-strategy.inline.sharding-column=order_id
spring.shardingsphere.sharding.tables.t_order.table-strategy.inline.algorithm-expression=t_order_${order_id.longValue() % 2}
# 分库算法 t_order_item 多库分表
spring.shardingsphere.sharding.tables.t_order_item.key-generator.column=item_id
spring.shardingsphere.sharding.tables.t_order_item.key-generator.type=SNOWFLAKE
spring.shardingsphere.sharding.tables.t_order_item.actual-data-nodes=ds${0..1}.t_order_item_${0..1}
#spring.shardingsphere.sharding.tables.t_order_item.databaseStrategy.inline.shardingColumn=user_id
#spring.shardingsphere.sharding.tables.t_order_item.databaseStrategy.inline.algorithm-expression=ds${user_id % 2}
spring.shardingsphere.sharding.tables.t_order_item.tableStrategy.inline.sharding-column=order_id
spring.shardingsphere.sharding.tables.t_order_item.tableStrategy.inline.algorithm-expression=t_order_item_${order_id % 2}
# 绑定表规则列表，防止关联查询出现笛卡尔积
#spring.shardingsphere.sharding.binding-tables[0]=t_order,t_order_item
spring.shardingsphere.sharding.binding-tables=t_order,t_order_item



# 读写分离配置：查询时的负载均衡算法round_robin（轮询）和random（随机）
spring.shardingsphere.masterslave.load-balance-algorithm-type=round_robin
spring.shardingsphere.masterslave.name=ms
# 读写分离
#spring.shardingsphere.masterslave.master-data-source-name=ds0
#spring.shardingsphere.masterslave.slave-data-source-names=ds0slave1,ds0slave2
# 读写分离(下边的ds0全部是数据源名称)
spring.shardingsphere.sharding.master-slave-rules.ds0.master-data-source-name=ds0
spring.shardingsphere.sharding.master-slave-rules.ds0.slave-data-source-names=ds0slave1,ds0slave2
spring.shardingsphere.sharding.master-slave-rules.ds1.master-data-source-name=ds1
spring.shardingsphere.sharding.master-slave-rules.ds1.slave-data-source-names=ds1slave1,ds1slave2

# 显示SQL
spring.shardingsphere.props.sql.show=true